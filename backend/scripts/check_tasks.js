const mongoose = require('mongoose');
require('dotenv').config();

const Task = require('../models/Task');
const User = require('../models/User');

async function checkTasks() {
  try {
    await mongoose.connect(process.env.MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });

    console.log('๐ ุชู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช');

    // ุฌูุจ ุฌููุน ุงูููุงู
    const tasks = await Task.find({});
    console.log(`\n๐ ุฅุฌูุงูู ุงูููุงู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช: ${tasks.length}`);

    if (tasks.length === 0) {
      console.log('โ ูุง ุชูุฌุฏ ููุงู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช!');
      return;
    }

    // ุนุฑุถ ุชูุงุตูู ูู ูููุฉ
    console.log('\n๐ ุชูุงุตูู ุงูููุงู:');
    tasks.forEach((task, index) => {
      console.log(`\n${index + 1}. ${task.title}`);
      console.log(`   - ุงููุตู: ${task.description}`);
      console.log(`   - ุงูุญุงูุฉ: ${task.status}`);
      console.log(`   - ุงูุฃููููุฉ: ${task.priority}`);
      console.log(`   - ุงููุณุคูู: ${task.assigneeId}`);
      console.log(`   - ุงููุดุฑูุน: ${task.projectId}`);
      console.log(`   - ุชุงุฑูุฎ ุงูุฅูุดุงุก: ${task.createdAt}`);
    });

    // ุฌูุจ ุฌููุน ุงููุณุชุฎุฏููู
    const users = await User.find({});
    console.log(`\n๐ฅ ุฅุฌูุงูู ุงููุณุชุฎุฏููู: ${users.length}`);

    console.log('\n๐ค ุชูุงุตูู ุงููุณุชุฎุฏููู:');
    users.forEach((user, index) => {
      console.log(`\n${index + 1}. ${user.name}`);
      console.log(`   - ุงูุจุฑูุฏ ุงูุฅููุชุฑููู: ${user.email}`);
      console.log(`   - ุงูุฏูุฑ: ${user.role}`);
      console.log(`   - ุงููุนุฑู: ${user._id}`);
    });

    // ูุญุต ุงูููุงู ุงููุฎุตุตุฉ ููู ูููุฏุณ
    console.log('\n๐ ูุญุต ุงูููุงู ุงููุฎุตุตุฉ ูููููุฏุณูู:');
    
    const engineers = users.filter(user => user.role === 'engineer');
    engineers.forEach(engineer => {
      const engineerTasks = tasks.filter(task => task.assigneeId === engineer._id.toString());
      console.log(`\n๐ท ${engineer.name} (${engineer.email}):`);
      console.log(`   - ุงููุนุฑู: ${engineer._id}`);
      console.log(`   - ุนุฏุฏ ุงูููุงู ุงููุฎุตุตุฉ: ${engineerTasks.length}`);
      
      if (engineerTasks.length > 0) {
        engineerTasks.forEach(task => {
          console.log(`     โข ${task.title} (${task.status})`);
        });
      } else {
        console.log(`     โข ูุง ุชูุฌุฏ ููุงู ูุฎุตุตุฉ`);
      }
    });

    // ูุญุต ุงูููุงู ุบูุฑ ุงููุฎุตุตุฉ
    const unassignedTasks = tasks.filter(task => !task.assigneeId);
    console.log(`\nโ ุงูููุงู ุบูุฑ ุงููุฎุตุตุฉ: ${unassignedTasks.length}`);
    if (unassignedTasks.length > 0) {
      unassignedTasks.forEach(task => {
        console.log(`   โข ${task.title} (${task.status})`);
      });
    }

    await mongoose.disconnect();
    console.log('\nโ ุชู ูุญุต ูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ!');
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ูุญุต ูุงุนุฏุฉ ุงูุจูุงูุงุช:', error);
    await mongoose.disconnect();
  }
}

checkTasks(); 